/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var configProvider_utils_context = require('../../_chunks/dep-93f95d13.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var isString = require('../../_chunks/dep-d108653b.js');
var cloneDeep = require('../../_chunks/dep-3e114850.js');
var isFunction = require('../../_chunks/dep-fca60f44.js');
require('../../_chunks/dep-ff8fcf16.js');
require('../../_chunks/dep-91320004.js');
require('dayjs');
require('../../_chunks/dep-b639c1c1.js');
require('../../_chunks/dep-2c7d4d23.js');
require('../../_chunks/dep-585a9bde.js');
require('../../_chunks/dep-4086f164.js');
require('../../_chunks/dep-eb7d956f.js');
require('../../_chunks/dep-def51c16.js');
require('../../_chunks/dep-70a764ff.js');
require('../../_chunks/dep-b3f3f98b.js');
require('../../_chunks/dep-bc6186ff.js');
require('../../_chunks/dep-30330e5f.js');
require('../../_chunks/dep-107cac75.js');
require('../../_chunks/dep-8a1d4392.js');
require('../../_chunks/dep-d51393ab.js');
require('../../_chunks/dep-08f1a433.js');
require('../../_chunks/dep-2a053834.js');
require('../../_chunks/dep-bf8b0575.js');
require('../../_chunks/dep-b2793617.js');
require('../../_chunks/dep-470fd721.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);

function getPluralIndex(count) {
  if (count === 0) return 0;
  if (count === 1) return 1;
  return 2;
}
function t(pattern) {
  if (isString.isString(pattern)) {
    var text = pattern;
    var count;
    var data = {};
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length > 0) {
      var firstArg = args[0],
        secondArg = args[1];
      if (typeof firstArg === "number") {
        count = firstArg;
        if (secondArg && _typeof__default["default"](secondArg) === "object") {
          data = secondArg;
        } else {
          data.count = count;
        }
      } else if (_typeof__default["default"](firstArg) === "object" && firstArg !== null) {
        data = firstArg;
      }
    }
    if (text.includes("|")) {
      var pluralParts = text.split("|").map(function (part) {
        return part.trim();
      });
      if (typeof count === "number") {
        var pluralIndex = getPluralIndex(count);
        if (pluralIndex < pluralParts.length) {
          text = pluralParts[pluralIndex];
        } else {
          text = pluralParts[pluralParts.length - 1];
        }
      } else {
        var _pluralParts = _slicedToArray__default["default"](pluralParts, 1),
          firstPart = _pluralParts[0];
        text = firstPart;
      }
    }
    if (data && Object.keys(data).length > 0) {
      var regular = /\{\s*([\w-]+)\s*\}/g;
      text = text.replace(regular, function (match, key) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          return String(data[key]);
        }
        return match;
      });
    }
    return text;
  }
  return "";
}

var globalConfigCopy = Vue.ref();
function useConfig() {
  var componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;
  var componentLocale = arguments.length > 1 ? arguments[1] : undefined;
  var injectGlobalConfig = Vue.getCurrentInstance() ? Vue.inject(configProvider_utils_context.configProviderInjectKey, null) : globalConfigCopy;
  var mergedGlobalConfig = Vue.computed(function () {
    return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || configProvider_utils_context.defaultGlobalConfig;
  });
  var globalConfig = Vue.computed(function () {
    return Object.assign({}, mergedGlobalConfig.value[componentName], componentLocale);
  });
  var classPrefix = Vue.computed(function () {
    return mergedGlobalConfig.value.classPrefix;
  });
  var t$1 = function t$1(pattern) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (isFunction.isFunction(pattern)) {
      if (!args.length) return pattern(Vue.h);
      return pattern.apply(void 0, args);
    }
    return t.apply(void 0, [pattern].concat(args));
  };
  return {
    t: t$1,
    global: globalConfig,
    globalConfig: globalConfig,
    classPrefix: classPrefix
  };
}
var provideConfig = function provideConfig(props) {
  var defaultData = cloneDeep.cloneDeep(configProvider_utils_context.defaultGlobalConfig);
  var mergedGlobalConfig = Vue.computed(function () {
    return Object.assign({}, configProvider_utils_context.mergeWith(defaultData, props.globalConfig));
  });
  Vue.provide(configProvider_utils_context.configProviderInjectKey, mergedGlobalConfig);
  if (!globalConfigCopy.value) {
    globalConfigCopy.value = mergedGlobalConfig.value;
  }
  return mergedGlobalConfig;
};

exports.provideConfig = provideConfig;
exports.useConfig = useConfig;
//# sourceMappingURL=useConfig.js.map
