/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tree_utils_adapt = require('./utils/adapt.js');
var tree_hooks_useDragHandle = require('./hooks/useDragHandle.js');
var tree_hooks_useTreeAction = require('./hooks/useTreeAction.js');
var tree_hooks_useTreeNodes = require('./hooks/useTreeNodes.js');
var tree_hooks_useTreeScroll = require('./hooks/useTreeScroll.js');
var tree_hooks_useTreeState = require('./hooks/useTreeState.js');
var tree_hooks_useTreeStore = require('./hooks/useTreeStore.js');
var tree_hooks_useTreeStyles = require('./hooks/useTreeStyles.js');
var tree_props = require('./props.js');
var tree_utils_index = require('./utils/index.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-0735d63b.js');
var index$1 = require('../_chunks/dep-01130408.js');
var index = require('../_chunks/dep-63bfc2fb.js');
require('@babel/runtime/helpers/slicedToArray');
require('../_chunks/dep-a4a942c3.js');
var camelCase = require('../_chunks/dep-6b73e8fe.js');
var isFunction = require('../_chunks/dep-fca60f44.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-2437d716.js');
require('../_chunks/dep-71820566.js');
require('../_chunks/dep-b1b934d4.js');
require('../_chunks/dep-d05f7718.js');
require('../_chunks/dep-1590b32e.js');
require('../_chunks/dep-4086f164.js');
require('../_chunks/dep-bc6186ff.js');
require('../_chunks/dep-f8c2f074.js');
require('../_chunks/dep-b3f3f98b.js');
require('../_chunks/dep-786ccd48.js');
require('../_chunks/dep-07a331c3.js');
require('../_chunks/dep-9b225e44.js');
require('../_chunks/dep-a540990f.js');
require('../_chunks/dep-d108653b.js');
require('../_chunks/dep-2e137265.js');
require('../_chunks/dep-5ab84d53.js');
require('../_chunks/dep-f1d29706.js');
require('../_chunks/dep-31c65b18.js');
require('../_chunks/dep-ff70e013.js');
require('../_chunks/dep-eb7d956f.js');
require('../_chunks/dep-15f28039.js');
require('../_chunks/dep-08f1a433.js');
require('../_chunks/dep-2c7d4d23.js');
require('../_chunks/dep-585a9bde.js');
require('../_chunks/dep-def51c16.js');
require('../_chunks/dep-107cac75.js');
require('../_chunks/dep-41a29a27.js');
require('tdesign-icons-vue-next');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../_chunks/dep-7828ec02.js');
require('../_chunks/dep-b1cffc1c.js');
require('../_chunks/dep-0cf0bc29.js');
require('../_chunks/dep-53661416.js');
require('../_chunks/dep-65d546eb.js');
require('../_chunks/dep-b70f9cd8.js');
require('../checkbox/consts/index.js');
require('../checkbox/hooks/useCheckboxLazyLoad.js');
require('../checkbox/hooks/useKeyboardEvent.js');
require('../_chunks/dep-a53f7917.js');
require('../_chunks/dep-91320004.js');
require('../_chunks/dep-0d2b5e58.js');
require('../_chunks/dep-42015aef.js');
require('../_chunks/dep-d04d0634.js');
require('../_chunks/dep-93f95d13.js');
require('../_chunks/dep-ff8fcf16.js');
require('dayjs');
require('../_chunks/dep-b639c1c1.js');
require('../_chunks/dep-70a764ff.js');
require('../_chunks/dep-30330e5f.js');
require('../_chunks/dep-8a1d4392.js');
require('../_chunks/dep-d51393ab.js');
require('../_chunks/dep-2a053834.js');
require('../_chunks/dep-3e114850.js');
require('../_chunks/dep-bf8b0575.js');
require('../_chunks/dep-b2793617.js');
require('../_chunks/dep-470fd721.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../checkbox/group.js');
require('../checkbox/checkbox-group-props.js');
require('../_chunks/dep-632fa359.js');
require('../_chunks/dep-1bac3950.js');
require('../_chunks/dep-4a361d8b.js');
require('../_chunks/dep-d735a60d.js');
require('../_chunks/dep-768729ab.js');
require('../loading/index.js');
require('../_chunks/dep-9976ba3b.js');
require('../loading/plugin.js');
require('../_chunks/dep-c4d37559.js');
require('../loading/icon/gradient.js');
require('../_chunks/dep-8828ecbe.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-694e599d.js');
require('../_chunks/dep-6281e9d2.js');
require('../loading/props.js');
require('../_chunks/dep-0c1f614d.js');
require('../_chunks/dep-93db0d6c.js');
require('../_chunks/dep-391a0ac9.js');
require('../_chunks/dep-21d5620a.js');
require('../_chunks/dep-9d937c62.js');
require('../_chunks/dep-c24fecfd.js');
require('../_chunks/dep-f3e23bf4.js');
require('../_chunks/dep-8ef89d8d.js');
require('../_chunks/dep-7d10e34c.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../_chunks/dep-3d3d4d37.js');
require('../_chunks/dep-b0d4d0b9.js');
require('../_chunks/dep-de8fe3e3.js');
require('../_chunks/dep-86c7017f.js');
require('../_chunks/dep-220eb941.js');
require('./hooks/useDraggable.js');
require('./tree-item.js');
require('./hooks/useItemState.js');
require('./hooks/useTreeItem.js');
require('./hooks/useItemEvents.js');
require('./hooks/useRenderIcon.js');
require('./hooks/useRenderLabel.js');
require('./hooks/useRenderLine.js');
require('./hooks/useRenderOperations.js');
require('./hooks/useTreeEvents.js');
require('../_chunks/dep-5a8664b0.js');
require('mitt');
require('../_chunks/dep-8f7a849d.js');
require('../_chunks/dep-ecf6e920.js');
require('../_chunks/dep-9d6940a3.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var _TdTree = Vue.defineComponent({
  name: "TTree",
  model: {
    prop: "value",
    event: "change"
  },
  props: tree_props["default"],
  setup: function setup(props2, context) {
    var _useConfig = configProvider_hooks_useConfig.useConfig("tree"),
      t = _useConfig.t,
      global = _useConfig.global;
    var classPrefix = index.usePrefixClass();
    var componentName = index.usePrefixClass("tree");
    var renderTNodeJSX = index$1.useTNodeJSX();
    var _useTreeState = tree_hooks_useTreeState["default"](props2, context),
      state = _useTreeState.state;
    var treeContentRef = state.treeContentRef,
      isScrolling = state.isScrolling;
    var _useTreeStore = tree_hooks_useTreeStore["default"](state),
      store = _useTreeStore.store,
      updateStoreConfig = _useTreeStore.updateStoreConfig,
      rebuild = _useTreeStore.rebuild;
    tree_hooks_useDragHandle["default"](state);
    var _useTreeAction = tree_hooks_useTreeAction["default"](state),
      setActived = _useTreeAction.setActived,
      setExpanded = _useTreeAction.setExpanded,
      setChecked = _useTreeAction.setChecked;
    var _useTreeScroll = tree_hooks_useTreeScroll["default"](state),
      onInnerVirtualScroll = _useTreeScroll.onInnerVirtualScroll,
      virtualConfig = _useTreeScroll.virtualConfig,
      scrollToElement = _useTreeScroll.scrollToElement;
    var _useTreeNodes = tree_hooks_useTreeNodes["default"](state),
      renderTreeNodes = _useTreeNodes.renderTreeNodes,
      nodesEmpty = _useTreeNodes.nodesEmpty;
    var _useTreeStyles = tree_hooks_useTreeStyles["default"](state),
      treeClasses = _useTreeStyles.treeClasses,
      treeContentStyles = _useTreeStyles.treeContentStyles,
      scrollStyles = _useTreeStyles.scrollStyles,
      cursorStyles = _useTreeStyles.cursorStyles;
    return {
      t: t,
      global: global,
      classPrefix: classPrefix,
      componentName: componentName,
      state: state,
      store: store,
      treeClasses: treeClasses,
      treeContentRef: treeContentRef,
      renderTNodeJSX: renderTNodeJSX,
      rebuild: rebuild,
      updateStoreConfig: updateStoreConfig,
      setActived: setActived,
      setExpanded: setExpanded,
      setChecked: setChecked,
      renderTreeNodes: renderTreeNodes,
      nodesEmpty: nodesEmpty,
      isScrolling: isScrolling,
      onInnerVirtualScroll: onInnerVirtualScroll,
      treeContentStyles: treeContentStyles,
      scrollStyles: scrollStyles,
      cursorStyles: cursorStyles,
      virtualConfig: virtualConfig,
      scrollToElement: scrollToElement,
      scrollTo: scrollToElement
    };
  },
  watch: {
    data: function data(list) {
      this.rebuild(list);
    }
  },
  methods: {
    refresh: function refresh() {
      this.store.refreshState();
    },
    setItem: function setItem(value, options) {
      var _this = this;
      var node = this.store.getNode(value);
      var spec = options;
      var keys = Object.keys(spec);
      if (node && spec) {
        ["expanded", "actived", "checked"].forEach(function (name) {
          if (keys.includes(name)) {
            var val = spec[name];
            delete spec[name];
            var methodName = "set".concat(camelCase.upperFirst(name));
            var setupMethod = _this[methodName];
            if (isFunction.isFunction(setupMethod)) {
              setupMethod.call(_this, node, val);
            }
          }
        });
        node.set(spec);
      }
    },
    getItem: function getItem(value) {
      var node = this.store.getNode(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getItems: function getItems(value) {
      var nodes = this.store.getNodes(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    },
    appendTo: function appendTo(para, item) {
      var store = this.store;
      var list = [];
      if (Array.isArray(item)) {
        list = item;
      } else {
        list = [item];
      }
      list.forEach(function (item2) {
        var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
        var node = tree_utils_index.getNode(store, val);
        if (node) {
          store.appendNodes(para, node);
        } else {
          store.appendNodes(para, item2);
        }
      });
    },
    insertBefore: function insertBefore(value, item) {
      var store = this.store;
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = tree_utils_index.getNode(store, val);
      if (node) {
        store.insertBefore(value, node);
      } else {
        store.insertBefore(value, item);
      }
    },
    insertAfter: function insertAfter(value, item) {
      var store = this.store;
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = tree_utils_index.getNode(store, val);
      if (node) {
        store.insertAfter(value, node);
      } else {
        store.insertAfter(value, item);
      }
    },
    remove: function remove(value) {
      return this.store.remove(value);
    },
    getIndex: function getIndex(value) {
      return this.store.getNodeIndex(value);
    },
    getParent: function getParent(value) {
      var node = this.store.getParent(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getParents: function getParents(value) {
      var nodes = this.store.getParents(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    },
    getPath: function getPath(value) {
      var node = this.store.getNode(value);
      var pathNodes = [];
      if (node) {
        pathNodes = node.getPath().map(function (node2) {
          return node2.getModel();
        });
      }
      return pathNodes;
    },
    getTreeData: function getTreeData(value) {
      var list = [];
      if (value) {
        var node = this.store.getNode(value);
        if (!node) return [];
        list = this.store.getNodes(value);
      } else {
        list = this.store.getNodes();
      }
      var nodeMap = {};
      var treeNodes = [];
      list.forEach(function (item) {
        var value2 = item.value;
        var itemData = _objectSpread(_objectSpread({}, item.data), {}, {
          value: value2
        });
        if (itemData.children !== true) {
          delete itemData.children;
        }
        nodeMap[value2] = itemData;
        var parent = item.getParent();
        if (!parent) {
          treeNodes.push(itemData);
        } else {
          var parentData = nodeMap[parent.value];
          if (!parentData) {
            treeNodes.push(itemData);
          } else {
            if (!Array.isArray(parentData.children)) {
              parentData.children = [];
            }
            parentData.children.push(itemData);
          }
        }
      });
      return treeNodes;
    }
  },
  render: function render(h) {
    var _allNodes$value$filte, _allNodes$value, _refProps$scroll$valu, _refProps$scroll$valu2;
    var state = this.state,
      treeClasses = this.treeClasses,
      updateStoreConfig = this.updateStoreConfig,
      renderTreeNodes = this.renderTreeNodes,
      nodesEmpty = this.nodesEmpty,
      isScrolling = this.isScrolling,
      virtualConfig = this.virtualConfig,
      treeContentStyles = this.treeContentStyles,
      scrollStyles = this.scrollStyles,
      cursorStyles = this.cursorStyles;
    var createElement = tree_utils_adapt.getCreateElement();
    var scope = state.scope,
      allNodes = state.allNodes,
      refProps = state.refProps;
    scope.scopedSlots = tree_utils_adapt.getScopedSlots(this);
    updateStoreConfig();
    var treeNodeViews = renderTreeNodes(createElement);
    var cname = this.componentName;
    var isVirtual = virtualConfig.isVirtualScroll.value;
    var emptyNode = null;
    if (nodesEmpty) {
      var useLocale = !this.empty && !this.$slots.empty;
      var emptyContent = useLocale ? this.t(this.global.empty) : this.renderTNodeJSX("empty");
      emptyNode = Vue.createVNode("div", {
        "class": "".concat(cname, "__empty")
      }, [emptyContent]);
    } else if (treeNodeViews.length <= 0) {
      emptyNode = Vue.createVNode("div", null, null);
    }
    var $props = this.$props;
    var transition = $props.transition;
    var treeNodeList = null;
    if (!transition || isVirtual && isScrolling) {
      treeNodeList = Vue.createVNode("div", {
        "class": "".concat(cname, "__list"),
        "style": scrollStyles
      }, [treeNodeViews]);
    } else {
      treeNodeList = Vue.createVNode(Vue.TransitionGroup, {
        "tag": "div",
        "class": "".concat(cname, "__list"),
        "enter-active-class": "".concat(cname, "__item--enter-active"),
        "leave-active-class": "".concat(cname, "__item--leave-active"),
        "style": scrollStyles
      }, _isSlot(treeNodeViews) ? treeNodeViews : {
        "default": function _default() {
          return [treeNodeViews];
        }
      });
    }
    var topValue = ((_allNodes$value$filte = (_allNodes$value = allNodes.value) === null || _allNodes$value === void 0 ? void 0 : _allNodes$value.filter(function (node) {
      return node.visible;
    }).length) !== null && _allNodes$value$filte !== void 0 ? _allNodes$value$filte : 0) * ((_refProps$scroll$valu = (_refProps$scroll$valu2 = refProps.scroll.value) === null || _refProps$scroll$valu2 === void 0 ? void 0 : _refProps$scroll$valu2.rowHeight) !== null && _refProps$scroll$valu !== void 0 ? _refProps$scroll$valu : 34);
    var placeholderStyles = {
      width: "1px",
      height: "1px",
      opacity: 0,
      pointerEvents: "none",
      position: "absolute",
      left: 0,
      top: "".concat(topValue, "px")
    };
    var placeholderEl = Vue.createVNode("div", {
      "style": placeholderStyles
    }, null);
    var treeNode = Vue.createVNode("div", {
      "class": treeClasses,
      "ref": "treeContentRef",
      "onScroll": this.onInnerVirtualScroll,
      "style": treeContentStyles
    }, [isVirtual && Vue.createVNode("div", {
      "class": "".concat(cname, "__vscroll-cursor"),
      "style": cursorStyles
    }, null), emptyNode || treeNodeList, isVirtual && placeholderEl]);
    return treeNode;
  }
});

exports["default"] = _TdTree;
//# sourceMappingURL=tree.js.map
