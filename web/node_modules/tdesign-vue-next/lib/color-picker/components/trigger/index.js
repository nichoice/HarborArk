/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, watch, createVNode, mergeProps } from 'vue';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { Input } from '../../../input/index.js';
import { g as getColorObject, C as Color } from '../../../_chunks/dep-e682d262.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/toConsumableArray';
import { useBaseClassName } from '../../hooks/index.js';
import 'lodash-es';
import '@babel/runtime/helpers/typeof';
import '../../../_chunks/dep-f63d87ab.js';
import { u as useCommonClassName } from '../../../_chunks/dep-a40df139.js';
import '../../../config-provider/hooks/useConfig.js';
import '@babel/runtime/helpers/slicedToArray';
import '../../../_chunks/dep-4e1ab078.js';
import '../../../input/input.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'tdesign-icons-vue-next';
import '../../../input/props.js';
import '../../../_chunks/dep-33b31db2.js';
import '../../../_chunks/dep-ad04adab.js';
import '../../../_chunks/dep-ab05c766.js';
import '../../../_chunks/dep-e5485747.js';
import '../../../_chunks/dep-a45ebbd0.js';
import '../../../_chunks/dep-877740d0.js';
import '../../../_chunks/dep-503959a8.js';
import '../../../input/hooks/useInput.js';
import '../../../form/consts/index.js';
import '../../../_chunks/dep-35f1094d.js';
import '../../../config-provider/utils/context.js';
import '../../../_chunks/dep-c763ae78.js';
import 'dayjs';
import '../../../_chunks/dep-0d4d868d.js';
import '../../../input/hooks/useLengthLimit.js';
import '../../../_chunks/dep-b3eca3c5.js';
import '../../../_chunks/dep-46618c3a.js';
import '../../../input/hooks/useInputEventHandler.js';
import '../../../input/hooks/useInputWidth.js';
import '../../../_chunks/dep-2d3bbad1.js';
import '../../../input/input-group.js';
import '../../../input/input-group-props.js';
import '../../../_chunks/dep-6a57b90d.js';
import 'tinycolor2';
import '../../../_chunks/dep-1b0efc13.js';

var DefaultTrigger = defineComponent({
  name: "DefaultTrigger",
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      "default": ""
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    borderless: {
      type: Boolean,
      "default": false
    },
    clearable: {
      type: Boolean,
      "default": false
    },
    inputProps: {
      type: Object,
      "default": function _default() {
        return {
          autoWidth: true
        };
      }
    },
    onTriggerChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    onTriggerClear: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    size: {
      type: String,
      "default": "medium"
    }
  },
  setup: function setup(props) {
    var baseClassName = useBaseClassName();
    var value = ref(props.color);
    var _useCommonClassName = useCommonClassName(),
      sizeClassNames = _useCommonClassName.SIZE;
    watch(function () {
      return [props.color];
    }, function () {
      return value.value = props.color;
    });
    var handleChange = function handleChange(input) {
      if (input !== props.color) {
        props.onTriggerChange(value.value, {
          color: getColorObject(new Color(input)),
          trigger: "input"
        });
      }
    };
    var handleClear = function handleClear(context) {
      var _props$onTriggerClear;
      return (_props$onTriggerClear = props.onTriggerClear) === null || _props$onTriggerClear === void 0 ? void 0 : _props$onTriggerClear.call(props, context);
    };
    return function () {
      var inputSlots = {
        label: function label() {
          return createVNode("div", {
            "class": ["".concat(baseClassName.value, "__trigger--default__color"), "".concat(baseClassName.value, "--bg-alpha")]
          }, [createVNode("span", {
            "class": ["color-inner", _defineProperty({}, sizeClassNames.value[props.size], props.size !== "medium")],
            "style": {
              background: value.value
            }
          }, null)]);
        }
      };
      return createVNode(Input, mergeProps({
        "borderless": props.borderless,
        "clearable": props.clearable,
        "size": props.size,
        "modelValue": value.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return value.value = $event;
        },
        "disabled": props.disabled,
        "onBlur": handleChange,
        "onChange": handleChange,
        "onClear": handleClear
      }, props.inputProps), inputSlots);
    };
  }
});

export { DefaultTrigger as default };
//# sourceMappingURL=index.js.map
