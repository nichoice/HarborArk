/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { getMark, emitEvent } from '../utils/index.mjs';
import useTreeAction from './useTreeAction.mjs';
import '../../_chunks/dep-c6e31930.mjs';
import '../../_chunks/dep-01197c66.mjs';
import '../../_chunks/dep-e4f02334.mjs';
import 'lodash-es';
import '../utils/adapt.mjs';
import 'vue';
import '../../_chunks/dep-0e2cdfe7.mjs';
import '../../_chunks/dep-7192c25c.mjs';
import '../../_chunks/dep-703fa035.mjs';
import '../../_chunks/dep-c03b010b.mjs';
import '../../_chunks/dep-e04daa35.mjs';
import '../../config-provider/hooks/useConfig.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-80c6ca3d.mjs';
import '../../_chunks/dep-6a94a546.mjs';
import '../../_chunks/dep-93b6fe86.mjs';
import '../../_chunks/dep-4d1211d3.mjs';
import '../../_chunks/dep-3f507036.mjs';
import '../../_chunks/dep-c5ec5f16.mjs';
import '../../_chunks/dep-cd264108.mjs';
import '../../_chunks/dep-7895b00e.mjs';
import '../../_chunks/dep-db87d252.mjs';
import 'tdesign-icons-vue-next';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../checkbox/consts/index.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import './style/css.mjs';
import '../../loading/index.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_chunks/dep-5b384966.mjs';
import '../../_chunks/dep-42bba769.mjs';
import '../../loading/props.mjs';
import '../../_chunks/dep-ed029945.mjs';
import '../../_chunks/dep-d62545ee.mjs';
import '../../_chunks/dep-e37c3d71.mjs';

function useTreeEvents(state) {
  var treeState = state;
  var props = treeState.props,
    context = treeState.context;
  var _useTreeAction = useTreeAction(state),
    toggleExpanded = _useTreeAction.toggleExpanded,
    toggleActived = _useTreeAction.toggleActived,
    toggleChecked = _useTreeAction.toggleChecked;
  var handleClick = function handleClick(evtState) {
    var mouseEvent = evtState.mouseEvent,
      event = evtState.event,
      node = evtState.node;
    if (!node || !mouseEvent) return;
    treeState.mouseEvent = mouseEvent;
    var shouldExpand = props.expandOnClickNode;
    var shouldActive = !props.disabled && !node.disabled && node.isActivable();
    var isRightClick = false;
    ["trigger", "ignore"].forEach(function (markName) {
      var mark = getMark(markName, event.target, event.currentTarget);
      var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
      if (markValue.indexOf("expand") >= 0) {
        if (markName === "trigger") {
          shouldExpand = true;
          isRightClick = true;
        } else if (markName === "ignore") {
          shouldExpand = false;
        }
      }
      if (markValue.indexOf("active") >= 0) {
        if (markName === "ignore") {
          shouldActive = false;
        }
      }
    });
    if (shouldExpand) {
      toggleExpanded(node);
      if (isRightClick) return;
    }
    if (shouldActive) {
      toggleActived(node);
    }
    var evtCtx = {
      node: node.getModel(),
      e: mouseEvent
    };
    emitEvent(props, context, "click", evtCtx);
    treeState.mouseEvent = null;
  };
  var handleChange = function handleChange(evtState, ctx) {
    var disabled = props.disabled;
    var node = evtState.node;
    if (!node || disabled || node.disabled || !node.isCheckable()) {
      return;
    }
    toggleChecked(node, ctx);
  };
  return {
    handleChange: handleChange,
    handleClick: handleClick
  };
}

export { useTreeEvents as default };
//# sourceMappingURL=useTreeEvents.mjs.map
