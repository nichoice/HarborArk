/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { computed, createVNode } from 'vue';
import { _ as _defineProperty } from '../../_chunks/dep-c6e31930.mjs';
import { isString } from 'lodash-es';
import { a as useTNodeJSX } from '../../_chunks/dep-0e2cdfe7.mjs';
import { Loading } from '../../loading/index.mjs';
import useClassName from './useClassName.mjs';
import { useConfig } from '../../config-provider/hooks/useConfig.mjs';
import '../../_chunks/dep-01197c66.mjs';
import '../../_chunks/dep-e4f02334.mjs';
import '../../_chunks/dep-7192c25c.mjs';
import '../../_chunks/dep-703fa035.mjs';
import '../../_chunks/dep-c03b010b.mjs';
import '../../_chunks/dep-e04daa35.mjs';
import '../../_chunks/dep-3f507036.mjs';
import '../../_chunks/dep-4d1211d3.mjs';
import '../../_chunks/dep-c5ec5f16.mjs';
import '../../_chunks/dep-cd264108.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-80c6ca3d.mjs';
import '../../_chunks/dep-6a94a546.mjs';
import '../../_chunks/dep-93b6fe86.mjs';
import '../../_chunks/dep-7895b00e.mjs';
import '../../_chunks/dep-db87d252.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_chunks/dep-5b384966.mjs';
import '../../_chunks/dep-42bba769.mjs';
import '../../loading/props.mjs';
import './style/css.mjs';

function useAsyncLoading(props) {
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table", props.locale),
    globalConfig = _useConfig.globalConfig;
  var _useClassName = useClassName(),
    isLoadingClass = _useClassName.isLoadingClass,
    isLoadMoreClass = _useClassName.isLoadMoreClass,
    asyncLoadingClass = _useClassName.asyncLoadingClass;
  var classes = computed(function () {
    return [asyncLoadingClass, _defineProperty(_defineProperty({}, isLoadingClass, props.asyncLoading === "loading"), isLoadMoreClass, props.asyncLoading === "load-more")];
  });
  function onLoadClick() {
    var _props$onAsyncLoading;
    if (!isString(props.asyncLoading)) return;
    (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 || _props$onAsyncLoading.call(props, {
      status: props.asyncLoading
    });
  }
  function renderAsyncLoading() {
    var asyncLoadingNode = renderTNode("asyncLoading");
    if (isString(asyncLoadingNode)) {
      var asyncLoading = props.asyncLoading;
      var loadingText = {
        "load-more": globalConfig.value.loadingMoreText,
        loading: globalConfig.value.loadingText
      }[String(asyncLoading)];
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [createVNode(Loading, {
        "indicator": asyncLoading === "loading",
        "loading": !!asyncLoading,
        "size": "small",
        "text": loadingText
      }, null)]);
    }
    if (![null, false, void 0].includes(asyncLoadingNode)) {
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [asyncLoadingNode]);
    }
    return null;
  }
  return {
    renderAsyncLoading: renderAsyncLoading
  };
}

export { useAsyncLoading as default };
//# sourceMappingURL=useAsyncLoading.mjs.map
