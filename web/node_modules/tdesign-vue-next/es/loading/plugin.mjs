/**
 * tdesign v1.15.5
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, reactive, h, createVNode, render } from 'vue';
import { merge } from 'lodash-es';
import _Loading from './loading.mjs';
import { u as usePrefixClass } from '../_chunks/dep-0e2cdfe7.mjs';
import { g as getAttach, a as addClass, r as removeClass } from '../_chunks/dep-c03b010b.mjs';
import '../_chunks/dep-4d1211d3.mjs';
import '../_chunks/dep-703fa035.mjs';
import '../_chunks/dep-c6e31930.mjs';
import '../_chunks/dep-01197c66.mjs';
import '../_chunks/dep-e4f02334.mjs';
import './icon/gradient.mjs';
import '../_chunks/dep-5b384966.mjs';
import '../_chunks/dep-7192c25c.mjs';
import '../_chunks/dep-42bba769.mjs';
import './props.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-80c6ca3d.mjs';
import '../_chunks/dep-e04daa35.mjs';
import '../_chunks/dep-6a94a546.mjs';
import '../_chunks/dep-93b6fe86.mjs';
import '../_chunks/dep-3f507036.mjs';
import '../_chunks/dep-c5ec5f16.mjs';
import '../_chunks/dep-cd264108.mjs';
import '../_chunks/dep-7895b00e.mjs';
import '../_chunks/dep-db87d252.mjs';

var fullScreenLoadingInstance = null;
function mergeDefaultProps(props) {
  var options = merge({
    fullscreen: false,
    attach: "body",
    loading: true,
    preventScrollThrough: true
  }, props);
  return options;
}
function createLoading(props, context) {
  var mergedProps = mergeDefaultProps(props);
  if (mergedProps.fullscreen && fullScreenLoadingInstance) {
    return fullScreenLoadingInstance;
  }
  var component = defineComponent({
    setup: function setup() {
      var loadingOptions = reactive(mergedProps);
      return function () {
        return h(_Loading, loadingOptions);
      };
    }
  });
  var attach = getAttach(mergedProps.fullscreen ? "body" : mergedProps.attach);
  var instance = createVNode(component);
  if (context !== null && context !== void 0 ? context : LoadingPlugin._context) {
    instance.appContext = context !== null && context !== void 0 ? context : LoadingPlugin._context;
  }
  var wrapper = document.createElement("div");
  render(instance, wrapper);
  var parentRelativeClass = usePrefixClass("loading__parent--relative").value;
  var lockClass = usePrefixClass("loading--lock");
  var lockFullscreen = mergedProps.preventScrollThrough && mergedProps.fullscreen;
  if (lockFullscreen) {
    addClass(document.body, lockClass.value);
  }
  if (attach) {
    addClass(attach, parentRelativeClass);
  } else {
    console.error("attach is not exist");
  }
  var loadingInstance = {
    hide: function hide() {
      removeClass(attach, parentRelativeClass);
      removeClass(document.body, lockClass.value);
      render(null, wrapper);
      wrapper.remove();
    }
  };
  return loadingInstance;
}
function produceLoading(props, context) {
  if (props === true) {
    fullScreenLoadingInstance = createLoading({
      fullscreen: true,
      loading: true,
      attach: "body",
      preventScrollThrough: true
    }, context);
    return fullScreenLoadingInstance;
  }
  if (props === false) {
    var _fullScreenLoadingIns;
    (_fullScreenLoadingIns = fullScreenLoadingInstance) === null || _fullScreenLoadingIns === void 0 || _fullScreenLoadingIns.hide();
    fullScreenLoadingInstance = null;
    return;
  }
  return createLoading(props);
}
var LoadingPlugin = produceLoading;
LoadingPlugin.install = function (app) {
  app.config.globalProperties.$loading = produceLoading;
  LoadingPlugin._context = app._context;
};

export { LoadingPlugin, LoadingPlugin as default };
//# sourceMappingURL=plugin.mjs.map
